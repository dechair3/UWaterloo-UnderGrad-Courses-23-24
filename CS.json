{
    "Name": "computerscience",
    "Notes": "The phrase \"Computer Science students\" refers to students\r\nenrolled in any honours plan offered through the David R. Cheriton\r\nSchool of Computer Science. Software Engineering, Computing and\r\nFinancial Management, and Bachelor of Computer Science (Data Science)\r\nstudents are considered Computer Science students. Students enrolled in\r\nthe BMath (Data Science) plan are not considered Computer Science\r\nstudents. Due to course restrictions on upper-year\r\ncourses, students pursuing a Computer Science Minor may need to enrol\r\nas Computer Science students for part of their undergraduate studies\r\nand should contact a computer science (CS) advisor for more information.\nA CS course may not be taken for credit if it is the\r\nprerequisite of another CS course that has already been passed.",
    "Courses": [
        {
            "courseCode": "CS100",
            "Name": "Introduction to Computing Through Applications",
            "Desc": "Using personal computers as effective problem solving tools for the present and the future. Effective use of spreadsheets to process, manipulate, and visualize numeric and textual information. Introduction to the Internet, World Wide Web, HTML, and XML. Algorithms underlying the functional components of web search engines and their influence on data access. Using wikis to publish, reshape, and organize data collaboratively. [Offered: F,W,S]",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Not open to Mathematics,Biomedical,Chemical,Civil,Computer & Electrical,Environmental,Geological,Management,Mechanical,Mechatronics,Nanotechnology & Systems Design Eng students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: All second,third or fourth year CS courses or equivalents",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS105",
            "Name": "Introduction to Computer Programming 1",
            "Desc": "An introduction to the fundamentals of computer programming through media computation. Students will learn to write interactive graphical programs. Fundamental language concepts such as variables, conditionals, loops, functions, and arrays. Programming concepts such as coding style, modular design, testing, and debugging. Media concepts such as 2D graphics drawing, input, animation, and image processing.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Not open to Mathematics students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 121, CS 115, 135, 137, 145, CHE 121, CIVE 121, ECE 150, MTE 121/GENE 121, NE 111, MSCI 121, PHYS 236, SYDE 121",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS106",
            "Name": "Introduction to Computer Programming 2",
            "Desc": "A continuation of the introduction to computer programming begun in CS 105. The use of programming, in conjunction with libraries, as a means of solving practical problems in art, design, and data processing. Basic text processing, manipulation of images and sound, handling and visualization of tabular and hierarchical data. Introductions to user interfaces, physical simulation, and object-oriented programming.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 105; Not open to Mathematics students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 121, CS 115, 135, 137, 145, CHE 121, CIVE 121, ECE 150, MTE 121/GENE 121, NE 111, MSCI 121, SYDE 121",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS114",
            "Name": "Principles of Computing for Science",
            "Desc": "Introduction to basic imperative programming principles; programming concepts including functions, flow control, lists, arrays; numerical accuracy and efficiency; data analysis and general-purpose algorithms. Introduction to object-oriented programming concepts.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Not open to Faculty of Math students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 116, 135, 136, 137, 138, 145, 146, BME 121, CHE 120, CIVE 121, ECE 150, GENE 121/MTE 121, ME 101, MSCI 121, NE 111, PHYS 236, SYDE 121",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS115",
            "Name": "Introduction to Computer Science 1",
            "Desc": "An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Function definition and application. Tracing via substitution. Design, testing, and documentation. Recursive data definitions. Lists and trees. Functional and data abstraction.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "None",
            "Coreqs": "None",
            "Antireqs": "Antireq: BME 121, CS 135, 137, 138, 145, CHE 121, CIVE 121, ECE 150, GENE 121/MTE 121, ME 101, NE 111, MSCI 121, PHYS 139, SYDE 121",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS116",
            "Name": "Introduction to Computer Science 2",
            "Desc": "This course builds on the techniques and patterns learned in CS 115 while making the transition to use of an imperative language. Generative and structural recursion. Mutation (assignment) and its role in an imperative language. Primitive types and basic I/O. Sequencing, selection, looping. Function definition and use. File and console I/O. Issues in computer science.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 115 or 135 or 145.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 114, 136, 137, 138, 146, PHYS 236, 239, MSCI 240, NE 111",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS135",
            "Name": "Designing Functional Programs",
            "Desc": "An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Syntax and semantics of a functional programming language. Tracing via substitution. Design, testing, and documentation. Linear and nonlinear data structures. Recursive data definitions. Abstraction and encapsulation. Generative and structural recursion. Historical context.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "None",
            "Coreqs": "None",
            "Antireqs": "Antireq: AE 121, BME 121, CS 115, 137, 138, 145, CIVE 121, ECE 150, ME 101, MSCI 121, PHYS 236, SYDE 121",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS136",
            "Name": "Elementary Algorithm Design and Data Abstraction",
            "Desc": "This course builds on the techniques and patterns learned in CS 135 while making the transition to use an imperative language. It introduces the design and analysis of algorithms, the management of information, and the programming mechanisms and methodologies required in implementations. Topics discussed include iterative and recursive sorting algorithms; lists, stacks, queues, trees, and their application; abstract data types and their implementations. Offered: F,W,S",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: At least 90% in CS 115 or at least 70% in CS 116 or at least 60% in CS 135 or CS 145.",
            "Coreqs": " Coreq: CS 136L.",
            "Antireqs": " Antireq: CS 137, 138, 146, PHYS 239",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS136L",
            "Name": "Tools and Techniques for Software Development",
            "Desc": "This course introduces students to tools and techniques useful in the software development lifecycle. Students learn to navigate and leverage commands and utilities in the Linux Command Line Shell. Students gain experience in version control software, writing scripts to automate tasks, and creating effective test cases to identify bugs. Tracing and debugging strategies are discussed. Students also gain experience in using built-in support for version control, testing, debugging, build automation, etc. in integrated development environments (IDEs). ",
            "Notes": "[Note: Course will be graded on a CR/NCR basis.]",
            "Consent": "None",
            "Prereqs": "Prereq: At least 90% in CS 115 or at least 70% in CS 116 or at least 60% in\nCS 135 or CS 145.",
            "Coreqs": " Coreq: CS 136 or CS 146",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS137",
            "Name": "Programming Principles",
            "Desc": "Review of fundamental programming concepts and their application. Procedures and parameter passing. Arrays and structures. Recursion.  Sorting. Pointers and simple dynamic structures.  Space and time analysis of designs. Design methodologies. [Offered: F]",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Software Engineering students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS138",
            "Name": "Introduction to Data Abstraction and Implementation",
            "Desc": "Software abstractions via elementary data structures and their implementation; encapsulation and modularity; class and interface definitions; object instantiation; recursion; elementary abstract data types, including sequences, stacks, queues, and trees; implementation using linked structures and arrays; vectors and strings; memory models; automatic vs. dynamic memory management. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: W]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 137",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS145",
            "Name": "Designing Functional Programs (Advanced Level)",
            "Desc": "CS 145 is an advanced-level version of CS 135. ",
            "Notes": "[Note: This course may be substituted for CS 135 in any degree plan or for prerequisite purposes. Offered: F]",
            "Consent": "Department Consent Required",
            "Prereqs": "None",
            "Coreqs": "None",
            "Antireqs": "Antireq: CS 115, 135, 137, 138",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS146",
            "Name": "Elementary Algorithm Design and Data Abstraction (Advanced Level)",
            "Desc": "CS 146 is an advanced-level version of CS 136. ",
            "Notes": "[Note: This course may be substituted for CS 136 in any degree plan or for prerequisite purposes. Students who receive a good grade in CS 135 may contact the instructor of CS 146 to seek admission without the formal prerequisites. Offered: W]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 145 with a grade of at least 75%.",
            "Coreqs": " Coreq: CS 136L.",
            "Antireqs": " Antireq: CS 116, 136, 137, 138.",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS200",
            "Name": "Concepts for Advanced Computer Usage",
            "Desc": "Important concepts underlying major personal computer application categories; methodologies for learning and evaluating software; operating system and hardware design from the user's point of view, with implications for maintaining a personal computer. Students are encouraged to use their own personal computer for assignments.  Social media and the effect of technology on society are explored throughout the course. [Offered: W,S]",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Not open to Computer Science students",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS230",
            "Name": "Introduction to Computers and Computer Systems",
            "Desc": "Basic computer architecture, organization, system services, and software. Typology of  processors, memory, I/O devices, and their performance. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: W,S]",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 116, 136, 138, 146 or (CS 114 with at least 60%; CS 115 or CS 135); Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 292/393, CS 241/241E, 251/251E, SYDE 192",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS231",
            "Name": "Algorithmic Problem Solving",
            "Desc": "The study of the steps required to solve real-world problems on a computer, including problem specification, choice of algorithmic paradigm, analysis, and implementation. Topics include exhaustive search, divide and conquer, greedy, and dynamic programming approaches. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 116, 136, 138, 146 or CS 114 with at least 60%; CS 115 or CS 135. Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 122, CS 341, ECE 250, MSCI 240, MTE 140, SYDE 223",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS234",
            "Name": "Data Types and Structures",
            "Desc": "Top-down design of data structures. Using representation-independent data types. Introduction to commonly used data types, including lists, sets, mappings, and trees. Selection of data representation. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 116, 136, 138, 146 or CS 114 with at least 60%; CS 115 or CS 135. Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 122, CS 240/240E, ECE 250, MSCI 240, MTE 140, SYDE 223",
            "crosslisted": "None",
            "online": true
        },
        {
            "courseCode": "CS240",
            "Name": "Data Structures and Data Management",
            "Desc": "Introduction to widely used and effective methods of data organization, focusing on data structures, their algorithms, and the performance of these algorithms. Specific topics include priority queues, sorting, dictionaries, data structures for text processing. ",
            "Notes": "[Note: Enrolment is restricted; see Note 1 above. Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: F,W,S]",
            "Consent": "None",
            "Prereqs": "Prereq: (CS 245/245E or SE 212), (one of CS 241/241E, 246/246E, 247), (one of STAT 206, 230, 240); Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 122, CS 234, CS 240E, ECE 250, MTE 140, SYDE 223",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS240E",
            "Name": "Data Structures and Data Management (Enriched)",
            "Desc": "Enriched version of CS 240. ",
            "Notes": "[Note: CS 240E may be substituted for CS 240 wherever the latter is a requirement. Enrolment is restricted. Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: As permitted by demand and available resources.]",
            "Consent": "None",
            "Prereqs": "Prereq: A grade of 85% or higher in one of CS 136, 138 or 146; Computer Science and BMATH (Data Science) Students only.",
            "Coreqs": " Coreq: One of STAT 206, 230, 240.",
            "Antireqs": " Antireq: CS 234, CS 240, ECE 250",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS241",
            "Name": "Foundations of Sequential Programs",
            "Desc": "The relationship between high-level languages and the computer architecture that underlies their implementation, including basic machine architecture, assemblers, specification and translation of programming languages, linkers and loaders, block-structured languages, parameter passing mechanisms, and comparison of programming languages. ",
            "Notes": "[Note: Enrolment is restricted. Lab is not scheduled and students are expected to find time in open hours to complete their work. CS 251 is a recommended corequisite. Offered: F,W,S]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 138 or (CS 246/246E and CS 136L) or (CS 136L and a grade of 85% or higher in one of CS 136 or 146); Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 230, CS 241E, ECE 351",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS241E",
            "Name": "Foundations of Sequential Programs (Enriched)",
            "Desc": "Enriched version of CS 241. ",
            "Notes": "[Note: CS 241E may be substituted for CS 241 wherever the latter is a requirement. Enrolment is restricted. Lab is not scheduled and students are expected to find time in open hours to complete their work. CS 251 is a recommended corequisite. Offered: As permitted by demand and available resources.]",
            "Consent": "None",
            "Prereqs": "Prereq: (CS 136L and a grade of 85% or higher in one of CS 136 or CS 146), or a grade of 85% or higher in CS 138; Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 230, ECE 351",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS245",
            "Name": "Logic and Computation",
            "Desc": "Logic as a tool for representation, reasoning, and computation. Propositional and predicate logic. Formalizing the notions of correct and incorrect reasoning, defining what is computable, and exploring the limits of computation. Godel's Incompleteness Theorem. Applications of logic to computer science.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: (One of CS 136, 138, 146), MATH 135; Honours Mathematics students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 245E, PMATH 330, ECE 208, SE 212",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS245E",
            "Name": "Logic and Computation (Enriched)",
            "Desc": "Enriched version of CS 245. ",
            "Notes": "[Note: CS 245E may be substituted for CS 245 wherever the latter is a requirement. Enrolment is restricted. Offered: As permitted by demand and available resources.]",
            "Consent": "None",
            "Prereqs": "Prereq: A grade of 85% or higher in one of CS 136 or 146; Honours Mathematics students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 245, ECE 208, PMATH 330, and SE 212",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS246",
            "Name": "Object-Oriented Software Development",
            "Desc": "Introduction to object-oriented programming and to tools and techniques for software development. Designing, coding, debugging, testing, and documenting medium-sized programs: reading specifications and designing software to implement them; selecting appropriate data structures and control structures; writing reusable code; reusing existing code; basic performance issues; debuggers; test suites. ",
            "Notes": "[Note: Enrolment is restricted; see Note 1 above. Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: F,W,S]",
            "Consent": "None",
            "Prereqs": "Prereq: (CS 146 and CS 136L) or (a grade of 60% or higher in CS 138) or (CS 136L and a grade of 60% or higher in CS 136); Honours Mathematics students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 246E, CS  247, MSCI 342, SYDE 322",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS246E",
            "Name": "Object-Oriented Software Development (Enriched)",
            "Desc": "Enriched version of CS 246. ",
            "Notes": "[Note: CS 246E may be substituted for CS 246 wherever the latter is a requirement. Enrolment is restricted. Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: As permitted by demand and available resources.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 136L, a grade of 85% in either CS 136 or CS 146; Honours Mathematics students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 246, SYDE 322",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS247",
            "Name": "Software Engineering Principles",
            "Desc": "Systematic methods for designing, coding, testing, and documenting medium-sized programs. Major topics include abstraction, modularity, software modeling, object-oriented programming and design, generic programming, testing and debugging. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: S]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 241/CS 241E; Software Engineering students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 246/246E, MSCI 342, SYDE 322",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS251",
            "Name": "Computer Organization and Design",
            "Desc": "Overview of computer organization and performance. Basics of digital logic design. Combinational and sequential elements. Data representation and manipulation. Basics of processor design. Pipelining. Memory hierarchies. Multiprocessors. ",
            "Notes": "[Note: Students enrolled in Digital Hardware Specialization should enrol in ECE 222. Enrolment is restricted; see Note 1 above. Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: F,W,S]",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 136, 138, 146; Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 251E, BME 292/393, ECE 222, ME 262, MTE 262, SYDE 192",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS251E",
            "Name": "Computer Organization and Design (Enriched)",
            "Desc": "Enriched version of CS 251. ",
            "Notes": "[Note: Students enrolled in Digital Hardware Specialization should enrol in ECE 222. See note 1. CS 251E may be substituted for CS 251 wherever the latter is a requirement. Enrolment is restricted. Lab is not scheduled and students are expected to find time in open hours to complete their work. Offered: As permitted by demand and available resources.]",
            "Consent": "None",
            "Prereqs": "Prereq: A grade of  85% or higher in one of CS 136 or 146; Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BME 292/393, CS 251, ECE 222, ME 262, MTE 262, SYDE 192",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS330",
            "Name": "Management Information Systems",
            "Desc": "An introduction to information systems and their strategic role in business. Topics include types of information systems, organizational requirements, systems development strategies, decision support systems, data and information management, and information systems management, control, and implementation.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 106, 116, 136, 138, 146, or (CS 114 with at least 60%; CS 115 or CS 135); Level at least 2B; Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: AFM 241, BUS 415W, 486W, CS 480/490, MSCI 441",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS335",
            "Name": "Computational Methods in Business and Finance",
            "Desc": "An introduction to numerical methods for business and finance. Floating-point arithmetic, interpolation. Methods for portfolio optimization and contingent-claims valuation. Solution of nonlinear equations. Monte Carlo methods, lattice methods, simulation of hedging strategies.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: (One of CS 116, 136, 138, 146) or (CS 114 with at least 60%; CS 115 or CS 135)); MATH 136 or 146, MATH 237 or 247, STAT 231 or 241; Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: AMATH 242/ CS 371, CS 370, MTE 204",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS338",
            "Name": "Computer Applications in Business: Databases",
            "Desc": "A user-oriented approach to the management of large collections of data. Methods used for the storage, selection, and presentation of data. Common database management systems. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 230, 231, 234, 246/246E, 330; or (AFM 341 and (CS 116 or CS 136 or CS 146)); Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 348, 448, MSCI 346",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS341",
            "Name": "Algorithms",
            "Desc": "The study of efficient algorithms and effective algorithm design techniques. Program design with emphasis on pragmatic and mathematical aspects of program efficiency. Topics include divide and conquer algorithms, recurrences, greedy algorithms, dynamic programming, graph search and backtrack, problems without algorithms, NP-completeness and its implications. ",
            "Notes": "[Note: Enrolment is restricted; see Note 1 above. Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E and (MATH 239 or 249); Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 231, ECE 406",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS343",
            "Name": "Concurrent and Parallel Programming",
            "Desc": "An introduction to concurrent and parallel programming, with an emphasis on language constructs. Major topics include exceptions, coroutines, atomic operations, critical sections, mutual exclusion, semaphores, high-level concurrency, deadlock, interprocess communication, process structuring, shared memor,y and distributed architectures. Students will learn how to structure, implement, and debug concurrent programs. ",
            "Notes": "[Note: Enrolment is restricted; see Note 1 above. Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS346",
            "Name": "Application Development",
            "Desc": "Introduction to full-stack application design and development. Students will work in project teams to design and build complete, working applications and services using standard tools. Topics include best-practices in design, development, testing, and deployment.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 246/246E; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS348",
            "Name": "Introduction to Database Management",
            "Desc": "The main objective of this course is to introduce students to fundamentals of database technology by studying databases from three viewpoints: those of the database user, the database designer, and the database administrator. It teaches the use of a database management system (DBMS) by treating it as a black box, focusing only on its functionality and its interfaces. Topics include introduction to database systems, relational database systems, database design methodology, SQL and interfaces, database application development, concept of transactions, ODBC, JDBC, database tuning, database administration, and current topics (distributed databases, data warehouses, data mining). ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: Computer Science and BMath (Data Science) students only.",
            "Coreqs": " Coreq: CS 240/240E.",
            "Antireqs": " Antireq: CS 338, ECE 356, 456, MSCI 346",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS349",
            "Name": "User Interfaces",
            "Desc": "An introduction to contemporary user interface implementation concepts, including event abstraction, graphical components, layout, feedback, testing, accessibility, and architectures to develop user interfaces. One or more types of interface toolkit paradigms are considered. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq:  CS 241/CS 241E and (one of MATH 115, 136, 146); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS350",
            "Name": "Operating Systems",
            "Desc": "An introduction to the fundamentals of operating system function, design, and implementation. Topics include concurrency, synchronization, processes, threads, scheduling, memory management, file systems, device management, and security. ",
            "Notes": "[Note: Enrolment is restricted; see Note 1 above. Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E, 241/241E, 246/246E, (CS 251/251E or ECE 222); Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: ECE 254, 350, MTE 241, SE 350",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS360",
            "Name": "Introduction to the Theory of Computing",
            "Desc": "Models of computers including finite automata and Turing machines. Basics of formal languages with applications to the syntax of programming languages. Alternate characterizations of language classes. Proving unrecognizability.  Unsolvable problems and their relevance to the semantics of programming. ",
            "Notes": "[Note: Enrolment is restricted; see Note 1 above.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E, 241/CS 241E and (MATH 239 or 249); Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 365",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS365",
            "Name": "Models of Computation",
            "Desc": "Finite automata and regular expressions. Pushdown automata and context-free grammars. Turing machines and undecidability. Time and space complexity. Diagonalization and hierarchies. CS 365 covers the material in CS 360 at an accelerated pace plus additional topics in computational complexity. ",
            "Notes": "[Note: CS 365 may be substituted for CS 360 in any degree plan or for prerequisite purposes; enrolment is restricted; see Note 1 above.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E, 241/CS 241E and (MATH 239 or 249); Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 360",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS370",
            "Name": "Numerical Computation",
            "Desc": "Principles and practices of basic numerical computation as a key aspect of scientific computation. Visualization of results. Approximation by splines, fast Fourier transforms, solution of linear and nonlinear equations, differential equations, floating point number systems, error, stability. Presented in the context of specific applications to image processing, analysis of data, scientific modeling. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: (One of MATH 118, 119, 128, 138, 148), (one of MATH 106, 114, 115, 136, 146), (one of CS 231, 234, 241/241E, 246/246E).",
            "Coreqs": "None",
            "Antireqs": " Antireq: AMATH 242/CS 371, CHE 121, CIVE 121, CS 335, ECE 204, MTE 204",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS371",
            "Name": "Introduction to Computational Mathematics",
            "Desc": "A rigorous introduction to the field of computational mathematics. The focus is on the interplay between continuous  models and  their solution via discrete processes. Topics include pitfalls in computation, solution of linear systems, interpolation, discrete Fourier transforms, and numerical integration. Applications are used as motivation. ",
            "Notes": "[Note: This course may be substituted for CS 370 in any degree plan or for prerequisite purposes; lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: (One of CS 116, 136, 138, 146), MATH 235 or 245, 237 or 247.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 335, 370, ECE 204, MTE 204",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS383",
            "Name": "Computational Digital Art Studio",
            "Desc": "An upper-level studio course to create computational projects that function as art works and aesthetic experiences. Students will work in an interdisciplinary environment to combine computer science principles with fine art technical and conceptual skills.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/CS 240E; FINE 228 or FINE 247",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS398",
            "Name": "Topics in Computer Science",
            "Desc": "See the Course Offerings List for topics available.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E and (CS 246/246E or 247); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS399",
            "Name": "Readings in Computer Science",
            "Desc": "Reading course as announced by the School.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E and (CS 246/246E or 247); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS430",
            "Name": "Applications Software Engineering",
            "Desc": "An investigation into the role and function of software engineering practice in the construction of computer based systems. Topics include: requirements and specification; documentation techniques; analysis and design; implementation; testing and maintenance; management issues.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 330; Level at least 3A; Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 446/ECE 452, SE 464",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS431",
            "Name": "Data-Intensive Distributed Analytics",
            "Desc": "Introduces non-CS major students to infrastructure for data-intensive analytics, with a focus on abstractions, frameworks, and algorithms that allow developers to distribute computation across many machines. Topics include core concepts (partitioning, replication, locality, consistency), computational models (MapReduce, dataflows, stream processing, bulk-synchronous parallel), and applications.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: (CS 231 or 234 or 341) and (CS 251/251E or 330); Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 451",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS436",
            "Name": "Networks and Distributed Computer Systems",
            "Desc": "An introduction to networks, protocols, and distributed systems. Layered models, resource management, naming, addressing and routing, reliable communication, security, and higher-level services. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 230, 241/241E, 246/246E, 251/251E; Not open to Computer Science students.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 454, 456, ECE 428, 454",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS442",
            "Name": "Principles of Programming Languages",
            "Desc": "An exposure to important concepts and issues in contemporary programming languages. Data types, abstraction, and polymorphism. Program structure. Lambda calculus and functional programming, logic programming, object-oriented programming. Semantics of programming languages. Critical comparison of language features and programming methodologies using examples drawn from a variety of programming languages including Lisp, Prolog, ML, Ada, Smalltalk, Icon, APL, and Lucid. Programming assignments involve the use of some of these languages. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS444",
            "Name": "Compiler Construction",
            "Desc": "Phases of compilation. Lexical analysis and a review of parsing. Compiler-compilers and translator writing systems. LEX and YACC. Scope rules, block structure, and symbol tables. Runtime stack management. Parameter passage mechanisms. Stack storage organization and templates. Heap storage management. Intermediate code. Code generation. Macros. ",
            "Notes": "[Note: This course involves project work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS445",
            "Name": "Software Requirements Specification and Analysis",
            "Desc": "Introduces students to the requirements definition phase of software development. Models, notations, and processes for software requirements identification, representation, analysis, and validation. Cost estimation from early documents and specifications. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: SE 463",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS446",
            "Name": "Software Design and Architectures",
            "Desc": "Introduces students to the design, implementation, and evolution phases of software development. Software design processes, methods, and notation. Implementation of designs. Evolution of designs and implementations. Management of design activities. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 430, SE 464",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS447",
            "Name": "Software Testing, Quality Assurance, and Maintenance",
            "Desc": "Introduces students to systematic testing of software systems. Software verification, reviews, metrics, quality assurance, and prediction of software reliability and availability. Related management issues. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: SE 465",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS448",
            "Name": "Database Systems Implementation",
            "Desc": "The objective of this course is to introduce students to fundamentals of building a relational database management system. The course focuses on the database engine core technology by studying topics such as storage management (data layout, disk-based data structures), indexing, query processing algorithms, query optimization, transactional concurrency control, logging and recovery. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 348 and (CS 350 or SE 350); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS449",
            "Name": "Human-Computer Interaction",
            "Desc": "An introduction to the fundamental theories, methods, and research in the design and evaluation of novel computational artifacts designed to meet real-world human needs. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E, 241CS/241E; Level at least 3B; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: SYDE 348/548",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS450",
            "Name": "Computer Architecture",
            "Desc": "The course is intended to provide the student with an appreciation of modern computer design and its relation to system architecture, compiler technology, and operating system functionality. The course places an emphasis on design based on the measurement of performance and its dependency on parallelism, efficiency, latency, and resource utilization. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: (CS 245/245E or SE 212) and (CS 350 or SE 350); Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: ECE 320, ECE 429",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS451",
            "Name": "Data-Intensive Distributed Computing",
            "Desc": "Introduces students to infrastructure for data-intensive computing, with a focus on abstractions, frameworks, and algorithms that allow developers to distribute computations across many machines.\u00a0Topics include core concepts (partitioning, replication, locality, consistency), computational models (MapReduce, dataflows, stream processing, bulk-synchronous parallel), and applications.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341, 348 and (CS 350 or SE 350); Computer Science and BMath (Data Science) students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS452",
            "Name": "Real-time Programming",
            "Desc": "Intended to give students experience with tools and techniques of real-time programming, this course includes not only issues of microcomputer architecture and a real-time programming language and operating system, but also hands-on experience programming a microcomputer for applications such as process control, data acquisition and communication. ",
            "Notes": "[Note: This course involves project work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS454",
            "Name": "Distributed Systems",
            "Desc": "An introduction to distributed systems, emphasizing the multiple levels of software in such systems. Specific topics include fundamentals of data communications, network architecture and protocols, local-area networks, concurrency control in distributed systems, recovery in distributed systems, and clock synchronization. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: ECE 454",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS456",
            "Name": "Computer Networks",
            "Desc": "An introduction to network architectures and protocols, placing emphasis on protocols used in the Internet. Specific topics include application layer protocols, network programming, transport protocols, routing, multicast, data link layer issues, multimedia networking, network security, and network management.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 436, ECE 358, 428",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS457",
            "Name": "System Performance Evaluation",
            "Desc": "Basic techniques of system performance evaluation. Specific topics include: performance modeling, discrete event simulation, verification and validation of simulation models, analysis of simulation output, analysis of single server queue and queueing networks, modeling of computer systems, networks, and other queueing or non-queueing systems. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: (CS 246/246E or 247) and (one of STAT 206, 231, 241); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS458",
            "Name": "Computer Security and Privacy",
            "Desc": "Security and privacy issues in various aspects of computing. Specific topics include comparing security and privacy, program security, writing secure programs, controls against program threats, operating system security, formal security models, network security, Internet application security and privacy, privacy-enhancing technologies, database security and privacy, inference, data mining, security policies, physical security, economics of security, and legal and ethical issues. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350. Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: ECE 458",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS462",
            "Name": "Formal Languages and Parsing",
            "Desc": "Languages and their representations. Grammars --Chomsky hierarchy. Regular sets and sequential machines. Context-free grammars -- normal forms, basic properties. Pushdown automata and transducers. Operations on languages. Undecidable problems in language theory. Applications to the design of programming languages and compiler construction.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 360 or 365; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS466",
            "Name": "Algorithm Design and Analysis",
            "Desc": "Algorithmic approaches and methods of assessment that reflect a broad spectrum of criteria, including randomized algorithms, amortized analysis, lower bounds, approximation algorithms, and on-line algorithms. Particular examples will be chosen from different areas of active research and application.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS467",
            "Name": "Introduction to Quantum Information Processing",
            "Desc": "Basics of computational complexity; basics of quantum information; quantum phenomena; quantum circuits and universality; relationship between quantum and classical complexity classes; simple quantum algorithms; quantum Fourier transform; Shor factoring algorithm; Grover search algorithm; physical realization of quantum computation; error-correction and fault-tolerance; quantum key distribution.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: MATH 235 or 245 with grade at least 80%; Level at least 3A",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS475",
            "Name": "Computational Linear Algebra",
            "Desc": "Basic concepts and implementation of numerical linear algebra techniques and their use in solving application problems. Special methods for  solving linear systems having special features. Direct methods: symmetric, positive definite, band, general sparse structures, ordering methods. Iterative methods: Jacobi, Gauss-Seidel, SOR, conjugate gradient. Computing and using orthogonal factorizations of matrices. QR and SVD methods for solving least squares problems. Eigenvalue and singular value decompositions. Computation and uses of these decompositions in practice. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: AMATH 242/CS 371 or CS 370.",
            "Coreqs": "None",
            "Antireqs": " Antireq: CS 372, 472",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS476",
            "Name": "Numeric Computation for Financial Modeling",
            "Desc": "The interaction of financial models, numerical methods, and computing environments. Basic computational aspects of option pricing and hedging. Numerical methods for stochastic differential equations, strong and weak convergence. Generating correlated random numbers. Time-stepping methods. Finite difference methods for the Black-Scholes equation. Discretization, stability, convergence. Methods for portfolio optimization, effect of data errors on portfolio weights. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work. Students who receive a good grade in CS 335 may contact the instructor of CS 476 to seek admission without the formal prerequisites.]",
            "Consent": "None",
            "Prereqs": "Prereq: (AMATH 242/CS 371 or CS 370) and (STAT 206 with at least 60% or STAT 231 or STAT 241)",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS479",
            "Name": "Neural Networks",
            "Desc": "An introduction to neural network methods, with some discussion of their relevance to neuroscience. Simple neuron models and networks of neurons. Training feedforward networks for classification or regression. Learning using the backpropagation of errors. Unsupervised learning methods. Optimal linear decoding. Recurrent neural networks. Convolutional neural networks. Advanced topics, including adversarial inputs and biologically plausible learning methods.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: One of CS 335, CS 370, CS 371/AMATH 242; and STAT 206 with at least 60% or STAT 230 or STAT 240",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS480",
            "Name": "Introduction to Machine Learning",
            "Desc": "Introduction to modeling and algorithmic techniques for machines to learn concepts from data. Generalization: underfitting, overfitting, cross-validation. Tasks: classification, regression, clustering. Optimization-based learning: loss minimization. regularization. Statistical learning: maximum likelihood, Bayesian learning. Algorithms: nearest neighbour, (generalized) linear regression, mixtures of Gaussians, Gaussian processes, kernel methods, support vector machines, deep learning, sequence learning, ensemble techniques. Large scale learning: distributed learning and stream learning. Applications: Natural language processing, computer vision, data mining, human computer interaction, information retrieval. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341 and (STAT 206 or 231 or 241); Computer Science and BMath (Data Science) students only.",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS482",
            "Name": "Computational Techniques in Biological Sequence Analysis",
            "Desc": "Computer science principles and algorithms in biological sequence analysis.  Topics include algorithms for sequence comparison, for large-scale database search in biological databases, for sequence assembly, for evolutionary tree reconstruction, for identifying important features in DNA and RNA sequences, and underlying computational techniques for understanding strings and trees and for making probabilistic inferences.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341 and (STAT 206 with at least 70% or STAT 231 with at least 60% or STAT 241)",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS484",
            "Name": "Computational Vision",
            "Desc": "Introduction to image and vision understanding by computer. Camera-system geometry, image formation and lighting, and image acquisition. Basic visual processes for recognition of edges, regions, lines, and surfaces. Processing of stereo images, and motion in image sequences. Object recognition. Applications of computer-vision systems. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: (One of AMATH 242/CS 371, CS 370, MATH 235, MATH 245) and (One of STAT 206, STAT 230 or 240); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS485",
            "Name": "Statistical and Computational Foundations of Machine Learning",
            "Desc": "Extracting meaningful patterns from random samples of large data sets. Statistical analysis of the resulting problems. Common algorithmic paradigms for such tasks. Central concepts: VC-dimension, margins of a classifier, sparsity and description length, other types of regularization. Performance guarantees: generalization bounds, data dependent error bounds, and computational complexity of learning algorithms. Common paradigms: neural networks, kernel methods and support-vector machines, boosting, nearest neighbor classifiers. Applications to data mining.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341 and (STAT 206 or 230 or 240); Computer Science and BMath (Data Science) students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS486",
            "Name": "Introduction to Artificial Intelligence",
            "Desc": "Goals and methods of artificial intelligence. Methods of general problem solving. Knowledge representation and reasoning. Planning. Reasoning about uncertainty. Machine learning. Multi-agent systems. Natural language processing. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341; Computer Science and BMath (Data Science) students only.",
            "Coreqs": " Coreq: STAT 206 or 231 or 241.",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS487",
            "Name": "Introduction to Symbolic Computation",
            "Desc": "An introduction to the use of computers for symbolic mathematical computation, involving traditional mathematical computations such as solving linear equations (exactly), analytic differentiation and integration of functions, and analytic solution of differential equations. ",
            "Notes": "[Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 231 or 234 or 240/240E; Honours Mathematics only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS488",
            "Name": "Introduction to Computer Graphics",
            "Desc": "Software and hardware for interactive computer graphics. Implementation of device drivers, 3-D transformations, clipping, perspective, and input routines. Data structures, hidden surface removal, colour shading techniques, and some additional topics will be covered. ",
            "Notes": "[Note: This course involves project work.]",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341 and (CS 350 or SE 350) and (CS 370 or 371); Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS489",
            "Name": "Advanced Topics in Computer Science",
            "Desc": "See the Course Offerings List for topics available.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Level at least 3B; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS490",
            "Name": "Information Systems Management",
            "Desc": "The integration of business and technical considerations in the design, implementation and management of information systems. Topics include: IS planning and development; business, management, executive, and strategic information systems, including case studies of selected large- scale systems; decision support systems; end-user training and development; systems security, disaster planning and recovery. Practical examples of information systems in industry.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 350 or SE 350; Computer Science students only.",
            "Coreqs": "None",
            "Antireqs": " Antireq: BUS\n415W, 486W",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS492",
            "Name": "The Social Implications of Computing",
            "Desc": "This course is designed to consider the problems encountered by individuals, organizations and society as computer technology is adopted, with a view towards assessing possible courses of action.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 240/240E; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS493",
            "Name": "Team Project 1",
            "Desc": "Students work in teams on substantial open-ended computer science problems as part of the CS 493/494 course sequence. Lectures describe project management\u00a0fundamentals and ethical and legal issues in computing. Students form teams, select projects,\u00a0define project goals, perform risk assessment, establish\u00a0a project\u00a0plan, and\u00a0develop\u00a0a prototype. Possible project topics can include development of software systems, analysis of extensions to existing systems across the field, and\u00a0experimental computer science.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 341, 350; Computer Science students only. Not open to Software Engineering students.",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS494",
            "Name": "Team Project 2",
            "Desc": "Continuing from CS 493, student teams continue development of their project, update project plans, explore design alternatives, perform testing, and analyze experimental results. Teams prepare and deliver technical presentations and demonstrations of their projects, and analyze ethical and legal aspects of their work.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: CS 493; Computer Science students only. Not open to Software Engineering students.",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS497",
            "Name": "Multidisciplinary Studies in Computer Science",
            "Desc": "See the Course Offerings list for topics available.",
            "Notes": "None",
            "Consent": "None",
            "Prereqs": "Prereq: Level at least 3B; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS499R",
            "Name": "Readings in Computer Science",
            "Desc": "Reading course as announced by the department.",
            "Notes": "None",
            "Consent": "Department Consent Required",
            "Prereqs": "Prereq: Level at least 3B; Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        },
        {
            "courseCode": "CS499T",
            "Name": "Honours Thesis",
            "Desc": "The student will undertake new analysis, synthesis, measurement, or experimentation to produce a document that demonstrates a depth of understanding of a topic that goes beyond what is obtained in a standard undergraduate education. ",
            "Notes": "[Note: Offered for CR/NCR only. CS 499R is recommended.  A detailed thesis proposal and names of a supervisor and reader are required.]",
            "Consent": "Department Consent Required",
            "Prereqs": "Prereq: Computer Science students only",
            "Coreqs": "None",
            "Antireqs": "None",
            "crosslisted": "None",
            "online": false
        }
    ]
}